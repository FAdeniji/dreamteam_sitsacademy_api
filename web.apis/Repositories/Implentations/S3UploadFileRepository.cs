using Amazon;
using Amazon.S3;
using Amazon.S3.Model;
using Amazon.S3.Transfer;
using Microsoft.AspNetCore.Mvc;
using web.apis;
using ILogger = Serilog.ILogger;

namespace web.apis
{
    public class S3UploadFileRepository : IS3UploadFileRepository
    {
        private readonly IConfiguration _config;
        private readonly ILogger _logger;

        public S3UploadFileRepository(IConfiguration config, ILogger logger)
        {
            _config = config;
            _logger = logger;
        }

        public string ExtractFileNameFromUrl(string url)
        {
            // Create a Uri object from the URL
            Uri uri = new Uri(url);

            // Extract the path part of the URL
            string path = uri.AbsolutePath;

            // Get the file name from the path
            string fileName = System.IO.Path.GetFileName(path);

            return fileName;
        }

        public string GeneratePreSignedUrl(string fileName, bool extendLink = false)
        {
            using (var amazonS3Client = new AmazonS3Client(_config.GetValue<string>("S3:AccessKey"), _config.GetValue<string>("S3:SecretKey"), RegionEndpoint.EUWest2))
            {
                try
                {
                    var bucketName = _config.GetValue<string>("S3:BucketName");

                    // Create a client
                    Int32.TryParse(_config.GetValue<string>("S3:AccessDuration"), out int accessDuration);
                    if (extendLink)
                        Int32.TryParse(_config.GetValue<string>("S3:AccessDuration"), out accessDuration);

                    var request = new GetPreSignedUrlRequest
                    {
                        BucketName = bucketName,
                        Key = fileName,
                        Expires = DateTime.Now.AddHours(accessDuration),
                    };

                    return amazonS3Client.GetPreSignedURL(request);
                }
                catch (Exception ex)
                {
                    _logger.Error("Unable to get a new pre-signed url", ex.Message);
                    return "";
                }
            }
        }

        public async Task<S3UploadViewModel> UploadFile(string keyName, IFormFile file)
        {
            // access key id and secret key id, can be generated by navigating to IAM roles in AWS and then add new user, select permissions
            //for this example, try giving S3 full permissions
            var s3UploadModel = new S3UploadViewModel();

            try
            {
                var accessKeyId = _config.GetValue<string>("S3:AccessKey");
                var secretAccessKey = _config.GetValue<string>("S3:SecretKey");
                using (var client = new AmazonS3Client(accessKeyId, secretAccessKey, RegionEndpoint.EUWest2))
                {
                    using (var newMemoryStream = new MemoryStream())
                    {
                        file.CopyTo(newMemoryStream);

                        var uploadRequest = new TransferUtilityUploadRequest
                        {
                            InputStream = newMemoryStream,
                            Key = keyName, // filename
                            BucketName = _config.GetValue<string>("S3:BucketName") // bucket name of S3
                        };

                        var fileTransferUtility = new TransferUtility(client);
                        await fileTransferUtility.UploadAsync(uploadRequest);

                        if (File.Exists(keyName))
                        {
                            File.Delete(keyName);
                        }

                        if (File.Exists(file.FileName))
                        {
                            File.Delete(file.FileName);
                        }

                        s3UploadModel.Filename = keyName;
                        s3UploadModel.Url = GeneratePreSignedUrl(keyName); // TODO: Double check if the presigned url is not empty
                        s3UploadModel.UploadStatus = true;
                    }
                }
            }
            catch (AmazonS3Exception amazonS3Exception)
            {
                if (amazonS3Exception.ErrorCode != null &&
                    (amazonS3Exception.ErrorCode.Equals("InvalidAccessKeyId")
                    ||
                    amazonS3Exception.ErrorCode.Equals("InvalidSecurity")))
                {
                    // throw new Exception("Check the provided AWS Credentials.");
                    _logger.Error(amazonS3Exception, "Check the provided AWS Credentials.");
                    throw new Exception("Check the provided AWS Credentials.");
                }
                else
                {
                    // throw new Exception("Error occurred: " + amazonS3Exception.Message);
                    _logger.Error(amazonS3Exception, "Error occurred: " + amazonS3Exception.Message);
                    throw new Exception("Error occurred: " + amazonS3Exception.Message);
                }

                s3UploadModel.UploadStatus = false;
            }

            return s3UploadModel;
        }

        [HttpPost("upload")]
        public async Task<S3UploadViewModel> UploadFileToS3(string keyName, IFormFile file)
        {
            // access key id and secret key id, can be generated by navigating to IAM roles in AWS and then add new user, select permissions
            //for this example, try giving S3 full permissions
            var s3UploadModel = new S3UploadViewModel();

            try
            {
                if (file == null || file.Length <= 0)
                    throw new Exception("\"No file uploaded");

                using var client = new AmazonS3Client(RegionEndpoint.EUWest2);

                var bucketName = _config.GetValue<string>("S3:BucketName");
                var key = keyName;
                var filePath = Path.GetTempFileName();

                if (file == null || file.Length <= 0)
                {
                    return null;
                }

                using (var memoryStream = new MemoryStream())
                {
                    await file.CopyToAsync(memoryStream);

                    var request = new PutObjectRequest
                    {
                        BucketName = bucketName,
                        Key = keyName,
                        InputStream = memoryStream,
                        ContentType = file.ContentType,
                        CannedACL = S3CannedACL.PublicRead // Make the uploaded file public
                    };

                    await client.PutObjectAsync(request);

                    // Generate the public URL for the uploaded file
                    var publicUrl = $"https://{bucketName}.s3.amazonaws.com/{keyName}";

                    if (File.Exists(file.FileName))
                    {
                        File.Delete(file.FileName);
                    }

                    s3UploadModel.Filename = keyName;
                    s3UploadModel.UploadStatus = true;
                }
            }
            catch (AmazonS3Exception amazonS3Exception)
            {
                if (amazonS3Exception.ErrorCode != null &&
                    (amazonS3Exception.ErrorCode.Equals("InvalidAccessKeyId")
                    ||
                    amazonS3Exception.ErrorCode.Equals("InvalidSecurity")))
                {
                    // throw new Exception("Check the provided AWS Credentials.");
                    _logger.Error(amazonS3Exception, "Check the provided AWS Credentials.");
                    throw new Exception("Check the provided AWS Credentials.");
                }
                else
                {
                    // throw new Exception("Error occurred: " + amazonS3Exception.Message);
                    _logger.Error(amazonS3Exception, "Error occurred: " + amazonS3Exception.Message);
                    throw new Exception("Error occurred: " + amazonS3Exception.Message);
                }
                s3UploadModel.UploadStatus = false;
            }
            catch (Exception ex)
            {
                _logger.Error("An Error occurred: " + ex.Message);
                s3UploadModel.UploadStatus = false;
            }

            return s3UploadModel;
        }


    }
}
